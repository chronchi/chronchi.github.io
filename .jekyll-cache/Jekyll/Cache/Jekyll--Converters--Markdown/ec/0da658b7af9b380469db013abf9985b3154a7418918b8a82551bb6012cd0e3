I"$A<p>Função que encontra o pivô da coluna, em outras palavras, o lowest one.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span><span class="nf"> get_low</span><span class="x">(</span><span class="n">column</span><span class="x">)</span>
    <span class="n">biggest_value</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="o">:</span><span class="x">(</span><span class="n">length</span><span class="x">(</span><span class="n">column</span><span class="x">))</span>
        <span class="k">if</span> <span class="n">column</span><span class="x">[</span><span class="n">j</span><span class="x">]</span> <span class="o">==</span> <span class="mi">1</span>
            <span class="n">biggest_value</span> <span class="o">=</span> <span class="n">j</span>
        <span class="k">end</span>
    <span class="k">end</span>
    <span class="k">return</span> <span class="n">biggest_value</span>
<span class="k">end</span>   
</code></pre></div></div>

<h2 id="algoritmo-para-redução">Algoritmo para redução</h2>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span><span class="nf"> reduce_matrix</span><span class="x">(</span><span class="n">boundary</span><span class="x">)</span>

    <span class="n">nb_simplex</span> <span class="o">=</span> <span class="n">size</span><span class="x">(</span><span class="n">boundary</span><span class="x">)[</span><span class="mi">1</span><span class="x">]</span>

    <span class="n">reduced</span> <span class="o">=</span> <span class="n">boundary</span>

    <span class="n">cycles</span> <span class="o">=</span> <span class="n">one</span><span class="x">(</span><span class="n">boundary</span><span class="x">)</span>

    <span class="k">for</span> <span class="n">col</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">nb_simplex</span>
        <span class="n">lowest_ones</span> <span class="o">=</span> <span class="x">[</span><span class="n">get_low</span><span class="x">(</span><span class="n">reduced</span><span class="x">[</span><span class="o">:</span><span class="x">,</span><span class="n">k</span><span class="x">])</span> <span class="k">for</span> <span class="n">k</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="x">(</span><span class="n">col</span><span class="o">-</span><span class="mi">1</span><span class="x">)]</span>
        <span class="k">while</span> <span class="n">sum</span><span class="x">(</span><span class="n">get_low</span><span class="x">(</span><span class="n">reduced</span><span class="x">[</span><span class="o">:</span><span class="x">,</span><span class="n">col</span><span class="x">])</span> <span class="o">.==</span> <span class="n">lowest_ones</span><span class="x">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">get_low</span><span class="x">(</span><span class="n">reduced</span><span class="x">[</span><span class="o">:</span><span class="x">,</span><span class="n">col</span><span class="x">])</span> <span class="o">!=</span> <span class="mi">0</span>
            <span class="k">for</span> <span class="n">k</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">length</span><span class="x">(</span><span class="n">lowest_ones</span><span class="x">)</span>
                <span class="k">if</span> <span class="n">get_low</span><span class="x">(</span><span class="n">reduced</span><span class="x">[</span><span class="o">:</span><span class="x">,</span><span class="n">k</span><span class="x">])</span> <span class="o">==</span> <span class="n">get_low</span><span class="x">(</span><span class="n">reduced</span><span class="x">[</span><span class="o">:</span><span class="x">,</span><span class="n">col</span><span class="x">])</span>
                    <span class="n">reduced</span><span class="x">[</span><span class="o">:</span><span class="x">,</span><span class="n">col</span><span class="x">]</span> <span class="o">=</span> <span class="n">rem</span><span class="o">.</span><span class="x">(</span><span class="n">reduced</span><span class="x">[</span><span class="o">:</span><span class="x">,</span><span class="n">col</span><span class="x">]</span> <span class="o">+</span> <span class="n">reduced</span><span class="x">[</span><span class="o">:</span><span class="x">,</span><span class="n">k</span><span class="x">],</span> <span class="mi">2</span><span class="x">)</span>
                    <span class="n">cycles</span><span class="x">[</span><span class="o">:</span><span class="x">,</span><span class="n">col</span><span class="x">]</span>  <span class="o">=</span> <span class="n">rem</span><span class="o">.</span><span class="x">(</span><span class="n">cycles</span><span class="x">[</span><span class="o">:</span><span class="x">,</span><span class="n">col</span><span class="x">]</span> <span class="o">+</span> <span class="n">cycles</span><span class="x">[</span><span class="o">:</span><span class="x">,</span><span class="n">k</span><span class="x">],</span> <span class="mi">2</span><span class="x">)</span>
                <span class="k">end</span>
            <span class="k">end</span>
        <span class="k">end</span>
    <span class="k">end</span>

    <span class="k">return</span> <span class="n">reduced</span><span class="x">,</span> <span class="n">cycles</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="exemplo">Exemplo</h2>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="n">DelimitedFiles</span>

<span class="n">boundary</span> <span class="o">=</span> <span class="n">readdlm</span><span class="x">(</span><span class="s">"boundary.txt"</span><span class="x">)</span>

<span class="n">boundary</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>7×7 Array{Float64,2}:
 0.0  0.0  0.0  1.0  1.0  0.0  0.0
 0.0  0.0  0.0  1.0  0.0  1.0  0.0
 0.0  0.0  0.0  0.0  1.0  1.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  1.0
 0.0  0.0  0.0  0.0  0.0  0.0  1.0
 0.0  0.0  0.0  0.0  0.0  0.0  1.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0
</code></pre></div></div>

<p>Calculando a matriz reduzida do bordo acima</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@time</span> <span class="n">reduced</span><span class="x">,</span> <span class="n">cycles</span> <span class="o">=</span> <span class="n">reduce_matrix</span><span class="x">(</span><span class="n">boundary</span><span class="x">)</span>

<span class="n">reduced</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  0.195500 seconds (198.82 k allocations: 8.872 MiB)





7×7 Array{Float64,2}:
 0.0  0.0  0.0  1.0  1.0  0.0  0.0
 0.0  0.0  0.0  1.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  1.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  1.0
 0.0  0.0  0.0  0.0  0.0  0.0  1.0
 0.0  0.0  0.0  0.0  0.0  0.0  1.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0
</code></pre></div></div>

<h2 id="outro-exemplo-outro-triângulo">Outro exemplo (outro triângulo)</h2>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">boundary_2</span> <span class="o">=</span> <span class="n">readdlm</span><span class="x">(</span><span class="s">"boundary_2.txt"</span><span class="x">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>7×7 Array{Float64,2}:
 0.0  0.0  0.0  1.0  0.0  1.0  0.0
 0.0  0.0  0.0  1.0  1.0  0.0  0.0
 0.0  0.0  0.0  0.0  1.0  1.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  1.0
 0.0  0.0  0.0  0.0  0.0  0.0  1.0
 0.0  0.0  0.0  0.0  0.0  0.0  1.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0
</code></pre></div></div>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">reduced_2</span><span class="x">,</span> <span class="n">cycles_2</span> <span class="o">=</span> <span class="n">reduce_matrix</span><span class="x">(</span><span class="n">boundary_2</span><span class="x">)</span>

<span class="n">reduced_2</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>7×7 Array{Float64,2}:
 0.0  0.0  0.0  1.0  0.0  0.0  0.0
 0.0  0.0  0.0  1.0  1.0  0.0  0.0
 0.0  0.0  0.0  0.0  1.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  1.0
 0.0  0.0  0.0  0.0  0.0  0.0  1.0
 0.0  0.0  0.0  0.0  0.0  0.0  1.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0
</code></pre></div></div>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cycles_2</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>7×7 Array{Float64,2}:
 1.0  1.0  0.0  0.0  0.0  0.0  0.0
 0.0  1.0  1.0  0.0  0.0  0.0  0.0
 0.0  0.0  1.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  1.0  0.0  1.0  0.0
 0.0  0.0  0.0  0.0  1.0  1.0  0.0
 0.0  0.0  0.0  0.0  0.0  1.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  1.0
</code></pre></div></div>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">boundary_3</span> <span class="o">=</span> <span class="n">readdlm</span><span class="x">(</span><span class="s">"boundary_3.txt"</span><span class="x">)</span>

<span class="nd">@time</span> <span class="n">reduced_3</span><span class="x">,</span> <span class="n">cycles_3</span> <span class="o">=</span> <span class="n">reduce_matrix</span><span class="x">(</span><span class="n">boundary_3</span><span class="x">)</span>

<span class="n">reduced_3</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  0.000078 seconds (310 allocations: 117.031 KiB)





13×13 Array{Float64,2}:
 0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  1.0  1.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  1.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  1.0
 0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0
</code></pre></div></div>

<h2 id="encontrando-os-diagramas-de-persistência">Encontrando os diagramas de persistência</h2>
<p><strong>Pareamento</strong></p>

<p>Vamos parear os simplexos em relação ao nascimento e morte de ciclo.</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span><span class="nf"> simplex_pairing</span><span class="x">(</span><span class="n">reduced</span><span class="x">)</span>
    <span class="c"># primeiro vamos parear as colunas não nulas</span>
    <span class="n">pairs</span> <span class="o">=</span> <span class="x">[]</span>
    <span class="n">nb_simplex</span> <span class="o">=</span> <span class="n">size</span><span class="x">(</span><span class="n">reduced</span><span class="x">)[</span><span class="mi">1</span><span class="x">]</span>
    <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">nb_simplex</span>
        <span class="n">temp</span> <span class="o">=</span> <span class="n">reduced</span><span class="x">[</span><span class="o">:</span><span class="x">,</span><span class="n">j</span><span class="x">]</span>
        <span class="k">if</span> <span class="n">temp</span> <span class="o">!=</span> <span class="n">zeros</span><span class="x">(</span><span class="n">nb_simplex</span><span class="x">)</span>
            <span class="n">lowest</span> <span class="o">=</span> <span class="n">get_low</span><span class="x">(</span><span class="n">temp</span><span class="x">)</span>
            <span class="n">pairs</span> <span class="o">=</span> <span class="x">[</span><span class="n">pairs</span><span class="x">;</span> <span class="x">(</span><span class="n">lowest</span><span class="x">,</span> <span class="n">j</span><span class="x">)]</span>
        <span class="k">end</span>
    <span class="k">end</span>

    <span class="c"># agora as colunas nulas que não foram pareadas são pareadas com o infinito</span>
    <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">nb_simplex</span>
        <span class="k">if</span> <span class="n">sum</span><span class="x">(</span><span class="n">j</span> <span class="o">.==</span> <span class="x">[</span><span class="n">pairs</span><span class="x">[</span><span class="n">i</span><span class="x">][</span><span class="mi">2</span><span class="x">]</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">length</span><span class="x">(</span><span class="n">pairs</span><span class="x">)])</span> <span class="o">==</span> <span class="mi">0</span>
            <span class="k">if</span> <span class="n">reduced</span><span class="x">[</span><span class="n">j</span><span class="x">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">sum</span><span class="x">(</span><span class="n">j</span> <span class="o">.==</span> <span class="x">[</span><span class="n">pairs</span><span class="x">[</span><span class="n">i</span><span class="x">][</span><span class="mi">1</span><span class="x">]</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="n">length</span><span class="x">(</span><span class="n">pairs</span><span class="x">)])</span> <span class="o">==</span> <span class="mi">0</span>
                <span class="n">pairs</span> <span class="o">=</span> <span class="x">[</span><span class="n">pairs</span><span class="x">;</span> <span class="x">(</span><span class="n">j</span><span class="x">,</span> <span class="nb">Inf</span><span class="x">)]</span>
            <span class="k">end</span>
        <span class="k">end</span>
    <span class="k">end</span>
    <span class="k">return</span> <span class="n">pairs</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Pareamento para as matrizes reduzidas que obtivemos antes</p>

<div class="language-julia highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pairs_1</span> <span class="o">=</span> <span class="n">simplex_pairing</span><span class="x">(</span><span class="n">reduced</span><span class="x">)</span>

<span class="n">println</span><span class="x">(</span><span class="n">pairs_1</span><span class="x">)</span>

<span class="n">pairs_2</span> <span class="o">=</span> <span class="n">simplex_pairing</span><span class="x">(</span><span class="n">reduced_2</span><span class="x">)</span>

<span class="n">println</span><span class="x">(</span><span class="n">pairs_2</span><span class="x">)</span>

<span class="n">pairs_3</span> <span class="o">=</span> <span class="n">simplex_pairing</span><span class="x">(</span><span class="n">reduced_3</span><span class="x">)</span>

<span class="n">println</span><span class="x">(</span><span class="n">pairs_3</span><span class="x">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Any[(2, 4), (3, 5), (6, 7), (1, Inf)]
Any[(2, 4), (3, 5), (6, 7), (1, Inf)]
Any[(2, 7), (6, 8), (5, 10), (4, 11), (12, 13), (1, Inf), (3, Inf), (9, Inf)]
</code></pre></div></div>
:ET